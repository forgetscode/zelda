import Head from "next/head";
import React from "react";
import { useEffect, useState } from "react";
import { HiChevronDown, HiTerminal } from "react-icons/hi";
import PageScrollLink from "../components/UtilityComponents/PageScrollLink";
import PageScroll from "../components/UtilityComponents/PageScroll";
import PageScrollImage from "../components/UtilityComponents/PageScrollImage";
import TextPageScroll from "../components/UtilityComponents/TextPageScroll";
import ParticleBackground from "../components/UtilityComponents/ParticleBackground";

function GetArray(n:number){
    return Array.from({length: n}, (x, i) => i).map(String)
}

interface Props {
    IDList:string[]
}

const Help = ({IDList}:Props) => {
    const [selected, setSelected] = useState<string>("")
    const [isScrolled, setIsScrolled] = useState(false)

    useEffect(()=> {
        const element = document.getElementById(selected)
        element?.scrollIntoView({behavior: "smooth" , block: "center"})
        setSelected("")
    }, [selected]);

    useEffect(() => {
        const handleScroll = () => {
            if (window.scrollY > 0) {
                setIsScrolled(true)
            } else {
                setIsScrolled(false)
            }
        }
    
        window.addEventListener("scroll", handleScroll)
    
        return () => {
            window.removeEventListener("scroll", handleScroll)
        }
    }, [])


    return(
        <>
            <Head>
                <title>Zelda</title>
                <link rel='icon' href="https://icon-library.com/images/mms-icon/mms-icon-17.jpg"/>
                <meta name="description" content="Generated by create next app" />
            </Head>

            <div className="flex h-full w-full pt-16 pl-20">
                
                <div className="-mt-16" id={IDList[0]}/>
                { isScrolled ?
                    <div className="fixed transition-all bg-teal-500 cursor-pointer hover:bg-teal-400 text-white rounded-full p-4 right-0 mr-3 md:mr-8 bottom-0 mb-16 z-40 shadow-sm shadow-teal-300/50"
                        onClick={()=>(setSelected(IDList[0]))}>
                        <p className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 mt-0.5">
                            ^
                        </p>
                    </div> 
                    : 
                        <></>
                    
                }
                <div className=" pt-16">    

                    <div className="h-screen flex flex-col space-y-8 items-center "> 

                        <div className="flex flex-row">
                            <header className="text-6xl font-semibold text-transparent p-3 bg-clip-text bg-gradient-to-r from-emerald-600 via-blue-600 to-purple-600 animate-text"> Legend</header>
                            <HiTerminal className=" mt-auto  h-20 w-20 text-white"></HiTerminal>
                        </div>
                            <div className="flex rounded-md bg-gradient-to-r from-teal-600 via-cyan-300 to-sky-600 pt-1 px-1 pb-1 shadow-lg shadow-sky-500/50">
                                <div className="w-full h-full">
                                    <div className="w-[350px] h-[420px] transition-all bg-black flex items-center justify-center">
                                        <span className="relative flex flex-col space-y-3 text-white text-lg font-medium">
                                            <p className="hover:text-teal-300 cursor-pointer" onClick={()=>(setSelected(IDList[1]))}> 1. Introduction</p>
                                            <p className="hover:text-sky-300 cursor-pointer" onClick={()=>(setSelected(IDList[2]))}> 2. Getting started with Phantom</p>
                                            <p className="hover:text-purple-300 cursor-pointer" onClick={()=>(setSelected(IDList[5]))}> 3. Connect your wallet</p>
                                            <p className="hover:text-teal-300 cursor-pointer" onClick={()=>(setSelected(IDList[8]))}> 4. Switching to devnet</p>
                                            <p className="hover:text-sky-300 cursor-pointer" onClick={()=>(setSelected(IDList[12]))}> 5. Understanding fees</p>
                                            <p className="hover:text-purple-300 cursor-pointer" onClick={()=>(setSelected(IDList[14]))}> 6. Airdrop</p>
                                            <p className="hover:text-teal-300 cursor-pointer" onClick={()=>(setSelected(IDList[16]))}> 7. Using Zelda</p>
                                            <p className="hover:text-purple-300 cursor-pointer" onClick={()=>(setSelected(IDList[21]))}> 8. Troubleshooting</p>
                                            <p className="hover:text-purple-300 cursor-pointer" onClick={()=>(setSelected("start"))}> 9. Reclaiming fees</p>
                                            <p className="hover:text-teal-300 cursor-pointer" onClick={()=>(setSelected("start"))}> 10. About Web3 messaging</p>
                                        </span>
                                    </div>
                                </div>
                            </div>
                            <HiChevronDown className="chevron motion-safe:animate-bounce transition duration-700 ease-in-out" onClick={()=>(setSelected(IDList[1]))}/>
                        </div>

                        

                        <TextPageScroll
                            id = {IDList[1]}
                            text= 
                            {`Zelda utilizes the Solana blockchain in the place of a server for the backend of a chat messaging application. 
                            By using Zelda you will be familiarized with Web3 basics as well as both the advantages and limitations of blockchain 
                            infrastructure.Fundamental differences start with the authentication system. Authentication is baked into Web3 and to get 
                            started you will need your Web3 passport, your first wallet.`}

                            header= "Introduction"
                            setState={setSelected}
                        />

                        <PageScrollLink
                            image = "/download_phantom.png"
                            w= {550} 
                            h= {550} 
                            link="https://phantom.app/download"
                            id = {IDList[2]}
                            text = "Select the extension based on your browser."
                            header= "Download Phantom"
                            setState={setSelected}
                        />

                        <PageScrollImage 
                            image = "/create_wallet.png"
                            w= {350} 
                            h= {400} 
                            id = {IDList[3]}
                            header= "Create your wallet"
                            setState={setSelected}
                        />

                        <PageScroll 
                            image = "/secret_key.png" 
                            w= {275} 
                            h= {300} 
                            id = {IDList[4]}

                            text= 
                            {`The secret key is your real password and is unique to you. 
                            You may recover your wallet from anywhere with this phrase and your phrase should never
                            be shown to anyone if you plan on keeping your data and assets secure. If you lose your 
                            secret phrase you will lose your ability to recover and port your wallet from devices.`}

                            header= "Your Secret Key"
                            setState={setSelected}
                        />

                        <PageScroll 
                            image = "/select_wallet.png" 
                            w= {500} 
                            h= {400} 
                            id = {IDList[5]}
                            text= "Hit “Select Wallet” in the top right of the Navigation bar."
                            header= "Select your wallet"
                            setState={setSelected}
                        />
                        
                        <PageScroll 
                            image = "/connect_wallet.png" 
                            w= {500} 
                            h= {400} 
                            id = {IDList[6]}
                            text="From the modal that pops up confirm your Phantom wallet by clicking on it on the modal."
                            header="Connect your wallet"
                            setState={setSelected}
                        />

                        <PageScroll 
                            image = "/allow_zelda.png" 
                            w= {225} 
                            h= {320} 
                            id = {IDList[7]}
                            text=
                            {`Approve the Zelda application to interact with your wallet by hitting connect. 
                            The following permission will give read access from your wallet to the app and allow the 
                            app to request transactions from your wallet.`}

                            header="Allow Zelda"
                            setState={setSelected}
                            extraText="Congratulations, you are connected!"
                        />

                        <TextPageScroll
                            id = {IDList[8]}

                            text= 
                            {`This step is optional but will help make sense of the experience. 
                            Blockchain is new and exciting and in order to simulate test work in a proper environment Devnet exists. 
                            Devnet is analogous to main-net, the real network, with the key difference being that the funds of Devnet do not 
                            have real world value and can be printed on a whim. `}

                            header= "Switching to Devnet"
                            setState={setSelected}
                        />

                        <PageScroll 
                            image = "/devnet_1.png" 
                            w= {225} 
                            h= {300} 
                            id = {IDList[9]}
                            text="Click on your wallet and hit the cog icon in the bottom right corner."
                            header="Configure your wallet"
                            setState={setSelected}
                        />

                        <PageScroll 
                            image = "/devnet_2.png" 
                            w= {225} 
                            h= {300} 
                            id = {IDList[10]}
                            text="Scrolldown and select “Change Network”."
                            header="Configuring your wallet..."
                            setState={setSelected}
                        />


                        <PageScroll 
                            image = "/devnet_3.png" 
                            w= {225} 
                            h= {300} 
                            id = {IDList[11]}
                            text="Select Devnet."
                            header="Wallet configued"
                            setState={setSelected}
                            extraText="Congratulations, you are connected to devnet!"
                        />


                        <TextPageScroll
                            id = {IDList[12]}

                            text= 
                            {`In order to utilize the blockchain, you must pay for transactions. 
                            A blockchain is as strong as its weakest unit and by requiring performant hardware for each node, Solana is fast and transactions take a low percentage of the network's resources allowing the transactions to be cheap for the user. 
                            Typically it will cost a hundredth of a cent to perform an action. 
                            However, when an action requires storing data, there is extra cost associated. Storage 
                            is not infinite and you must pay a proportionate rent for the space you are borrowing. 
                            When you have released your storage, the extra funds will be returned to you making the cost of storage temporary.`}

                            header= "Understanding Fees"
                            setState={setSelected}
                        />


                        <TextPageScroll
                            id = {IDList[13]}

                            text= 
                            {`Sending funds will be close to free but creating accounts to store that data will cost a few cents for “rent”.
                            You may have your rent be returned by closing those accounts. 
                            Space is not infinite so it needs to have a cost which for now is the effort in closing the account. 
                            As hardware improves and better tools are created on the network, space will have lower cost 
                            and become more of an automatic process. `}

                            header= "What this means"
                            setState={setSelected}
                            variant="rainbow"
                        />


                        <PageScroll 
                            image = "/Airdrop.png" 
                            w= {500} 
                            h= {400} 
                            id = {IDList[14]}
                            text="To get some devnet funds click on the airdrop page from the sidebar and hit the Aidrop button to collect some devnet sol."
                            header="Airdrop"
                            setState={setSelected}
                        />

                        <PageScroll 
                            image = "/airdrop2.png" 
                            w= {225} 
                            h= {300}
                            id = {IDList[15]}
                            text="After the app notifies you the airdrop was successful, check your wallet and you should have 1 Sol. Make sure you are on devnet and not main-net if you wish to see your funds."
                            header="Check your Airdrop"
                            setState={setSelected}
                        />


                        <PageScroll 
                            image = "/messages.png" 
                            w= {300} 
                            h= {400} 
                            id = {IDList[16]}
                            text="After connecting and funding your wallet, select the messages Icon from the sidebar and you will be introduced to the messaging application."
                            header="Using Zelda"
                            setState={setSelected}
                        />

                        <PageScroll 
                            image = "/messages2.png" 
                            w= {300} 
                            h= {400} 
                            id = {IDList[17]}
                            text="Most likely you currently have no chats. Let’s change that! Hit the add chat icon to start your first chat."
                            header="Chats"
                            setState={setSelected}
                        />

                        <PageScroll 
                            image = "/messages3.png" 
                            w= {500} 
                            h= {250} 
                            id = {IDList[18]}
                            text="Enter the public key of someone you want to chat with. This can be almost anyone but there are a few rules.
                                        
                            1. You cannot start a chat with yourself. This constraint at the program level on the blockchain and there is no way to circumvent this.

                            2. You cannot have more than 6 outgoing chats and 6 receiving chats at the same time. This constraint was created at the client level and can be arbitrarily adjusted by another programmer. This is a lazy way to address spam.
                            "
                            header="Adding a chat"
                            setState={setSelected}
                        />



                        <PageScroll 
                            image = "/messages4.png" 
                            w= {400} 
                            h= {400} 
                            id = {IDList[19]}
                            text="Hit the approve button to sign the transaction. 
                            This will send the request to create a chat to the blockchain just like how you would normally send the request to a server."
                            header="First transaction"
                            setState={setSelected}
                        />


                        <PageScroll 
                            image = "/messages5.png" 
                            w= {400} 
                            h= {400} 
                            id = {IDList[20]}
                            text="If everything went correctly you should see a chat created notification and your first chat."
                            header="Success!"
                            setState={setSelected}
                        />


                        <div className="h-screen flex flex-col space-y-8 md:space-y-24 items-center pt-36" id={"Message6"}>   
                            <p className="flex justify-center text-4xl md:text-6xl font-extrabold text-white" > Troubleshooting</p>
                            <div className="flex flex-col space-y-6 text-center">

                            </div>
                                <HiChevronDown className="chevron motion-safe:animate-bounce transition duration-700 ease-in-out" onClick={()=>(setSelected("Message7"))}/>
                        </div>


                </div>
            </div>
        </>
    )
}

export default Help

export async function getStaticProps() {
    const IDList = GetArray(40)
    return {
      props: {IDList}
    }
  }
  